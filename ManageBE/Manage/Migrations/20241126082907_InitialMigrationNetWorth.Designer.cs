// <auto-generated />
using System;
using Manage.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Manage.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241126082907_InitialMigrationNetWorth")]
    partial class InitialMigrationNetWorth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Manage.Models.CategoriaDocumenti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataInserimentoCategoria")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DescrizioneCategoria")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPredefinita")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NomeCategoria")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UtenteId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UtenteId");

                    b.ToTable("CategoriaDocumenti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataInserimentoCategoria = new DateTime(2024, 11, 26, 9, 29, 6, 473, DateTimeKind.Local).AddTicks(3083),
                            DescrizioneCategoria = "Descrizione categoria Predefinita 1",
                            IsPredefinita = true,
                            NomeCategoria = "Nome categoria Predefinita 1"
                        },
                        new
                        {
                            Id = 2,
                            DataInserimentoCategoria = new DateTime(2024, 11, 26, 9, 29, 6, 473, DateTimeKind.Local).AddTicks(3182),
                            DescrizioneCategoria = "Descrizione categoria Predefinita 2",
                            IsPredefinita = true,
                            NomeCategoria = "Nome categoria Predefinita 2"
                        });
                });

            modelBuilder.Entity("Manage.Models.Documenti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaDocumentiId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCreazioneDocumento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInserimentoDocumento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Titolo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UtenteId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaDocumentiId");

                    b.HasIndex("UtenteId");

                    b.ToTable("Documenti");
                });

            modelBuilder.Entity("Manage.Models.FileDocumenti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataInserimentoFile")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DocumentiId")
                        .HasColumnType("int");

                    b.Property<string>("EstensioneFile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NomeFile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PercorsoFile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DocumentiId");

                    b.ToTable("FileDocumenti");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.Base.InvestimentoBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Isin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("PrezzoAttualeInvestimento")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PrezzoMassimo")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PrezzoMedio")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PrezzoMinimo")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TipoInvestimento")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("TipoInvestimento");

                    b.Property<string>("TipoInvestimentoShadow")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.Property<string>("UtenteId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UtenteId");

                    b.ToTable("Investimenti");

                    b.HasDiscriminator<string>("TipoInvestimentoShadow").HasValue("InvestimentoBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Manage.Models.NetWorth.Base.Transazione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Commissione")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("DataTransazione")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("InvestimentoId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrezzoUnitario")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Quantita")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("TipoTransazione")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvestimentoId");

                    b.ToTable("Transazioni");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.CedolaTitoloDiStato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Anno")
                        .HasColumnType("int");

                    b.Property<decimal>("PercentualeCedola")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("TitoloDiStatoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TitoloDiStatoId");

                    b.ToTable("CedoleTitoloDiStato");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.RendimentoBuoniFruttiferi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuoniFruttiferiPostaliId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Durata")
                        .HasColumnType("time(6)");

                    b.Property<decimal>("PercentualeRendimento")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("BuoniFruttiferiPostaliId");

                    b.ToTable("RendimentiBuoniFruttiferi");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.TassoContoDeposito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContoDepositoId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Durata")
                        .HasColumnType("time(6)");

                    b.Property<decimal>("TassoInteresse")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ContoDepositoId");

                    b.ToTable("TassiContoDeposito");
                });

            modelBuilder.Entity("Manage.Models.Utente", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DataInserimentoUtente")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Manage.Models.NetWorth.Azione", b =>
                {
                    b.HasBaseType("Manage.Models.NetWorth.Base.InvestimentoBase");

                    b.Property<decimal>("DividendYield")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsAccumulo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Settore")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Azioni");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.BuoniFruttiferiPostali", b =>
                {
                    b.HasBaseType("Manage.Models.NetWorth.Base.InvestimentoBase");

                    b.Property<decimal>("PenalitaPercentuale")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("PenalitaPrelievoAnticipatoAttiva")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("BuoniFruttiferiPostali");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.ContoDeposito", b =>
                {
                    b.HasBaseType("Manage.Models.NetWorth.Base.InvestimentoBase");

                    b.Property<decimal>("AliquotaTasse")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("CostoGestioneFisso")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("HasPenalita")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("ImpostaBolloAnnuale")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PenalitaPercentuale")
                        .HasColumnType("decimal(65,30)");

                    b.ToTable("Investimenti", t =>
                        {
                            t.Property("PenalitaPercentuale")
                                .HasColumnName("ContoDeposito_PenalitaPercentuale");
                        });

                    b.HasDiscriminator().HasValue("ContoDeposito");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.Cryptovaluta", b =>
                {
                    b.HasBaseType("Manage.Models.NetWorth.Base.InvestimentoBase");

                    b.Property<string>("Blockchain")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("TassoStaking")
                        .HasColumnType("decimal(65,30)");

                    b.HasDiscriminator().HasValue("Cryptovalute");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.FondoPensione", b =>
                {
                    b.HasBaseType("Manage.Models.NetWorth.Base.InvestimentoBase");

                    b.Property<decimal>("InteresseAnnuale")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("PenalitaPrelievoAnticipatoAttiva")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PenalitaPrelievoPercentuale")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PercentualeStipendio")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PercentualeStipendioDatoreLavoro")
                        .HasColumnType("decimal(65,30)");

                    b.ToTable("Investimenti", t =>
                        {
                            t.Property("PenalitaPrelievoAnticipatoAttiva")
                                .HasColumnName("FondoPensione_PenalitaPrelievoAnticipatoAttiva");
                        });

                    b.HasDiscriminator().HasValue("FondoPensione");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.Immobile", b =>
                {
                    b.HasBaseType("Manage.Models.NetWorth.Base.InvestimentoBase");

                    b.Property<decimal>("AliquotaFiscale")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("CostiGestioneAnnui")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("DataAcquisto")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PrezzoAcquisto")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("RedditoAnnualeAffitto")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ValoreAttuale")
                        .HasColumnType("decimal(65,30)");

                    b.HasDiscriminator().HasValue("Immobile");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.Obbligazione", b =>
                {
                    b.HasBaseType("Manage.Models.NetWorth.Base.InvestimentoBase");

                    b.Property<decimal>("CedolaAnnua")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("DataScadenza")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HasPenalitaAnticipata")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PenalitaAnticipataPercentuale")
                        .HasColumnType("decimal(65,30)");

                    b.HasDiscriminator().HasValue("Obbligazioni");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.TitoloDiStato", b =>
                {
                    b.HasBaseType("Manage.Models.NetWorth.Base.InvestimentoBase");

                    b.Property<decimal>("BonusMantenimento")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("HasPenalita")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PenalitaAnticipata")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PenalitaPercentuale")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ValoreRimborso")
                        .HasColumnType("decimal(65,30)");

                    b.ToTable("Investimenti", t =>
                        {
                            t.Property("HasPenalita")
                                .HasColumnName("TitoloDiStato_HasPenalita");

                            t.Property("PenalitaPercentuale")
                                .HasColumnName("TitoloDiStato_PenalitaPercentuale");
                        });

                    b.HasDiscriminator().HasValue("TitoliDiStato");
                });

            modelBuilder.Entity("Manage.Models.CategoriaDocumenti", b =>
                {
                    b.HasOne("Manage.Models.Utente", "Utente")
                        .WithMany("CategorieDocumenti")
                        .HasForeignKey("UtenteId");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("Manage.Models.Documenti", b =>
                {
                    b.HasOne("Manage.Models.CategoriaDocumenti", "Categoria")
                        .WithMany("Documenti")
                        .HasForeignKey("CategoriaDocumentiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manage.Models.Utente", "Utente")
                        .WithMany("Documenti")
                        .HasForeignKey("UtenteId");

                    b.Navigation("Categoria");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("Manage.Models.FileDocumenti", b =>
                {
                    b.HasOne("Manage.Models.Documenti", "Documento")
                        .WithMany("FileDocumenti")
                        .HasForeignKey("DocumentiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Documento");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.Base.InvestimentoBase", b =>
                {
                    b.HasOne("Manage.Models.Utente", "Utente")
                        .WithMany("Investimenti")
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.Base.Transazione", b =>
                {
                    b.HasOne("Manage.Models.NetWorth.Base.InvestimentoBase", "Investimento")
                        .WithMany("Transazioni")
                        .HasForeignKey("InvestimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Investimento");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.CedolaTitoloDiStato", b =>
                {
                    b.HasOne("Manage.Models.NetWorth.TitoloDiStato", "TitoloDiStato")
                        .WithMany("Cedole")
                        .HasForeignKey("TitoloDiStatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TitoloDiStato");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.RendimentoBuoniFruttiferi", b =>
                {
                    b.HasOne("Manage.Models.NetWorth.BuoniFruttiferiPostali", "BuoniFruttiferiPostali")
                        .WithMany("Rendimenti")
                        .HasForeignKey("BuoniFruttiferiPostaliId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuoniFruttiferiPostali");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.TassoContoDeposito", b =>
                {
                    b.HasOne("Manage.Models.NetWorth.ContoDeposito", "ContoDeposito")
                        .WithMany("Tassi")
                        .HasForeignKey("ContoDepositoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContoDeposito");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Manage.Models.Utente", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Manage.Models.Utente", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manage.Models.Utente", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Manage.Models.Utente", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Manage.Models.CategoriaDocumenti", b =>
                {
                    b.Navigation("Documenti");
                });

            modelBuilder.Entity("Manage.Models.Documenti", b =>
                {
                    b.Navigation("FileDocumenti");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.Base.InvestimentoBase", b =>
                {
                    b.Navigation("Transazioni");
                });

            modelBuilder.Entity("Manage.Models.Utente", b =>
                {
                    b.Navigation("CategorieDocumenti");

                    b.Navigation("Documenti");

                    b.Navigation("Investimenti");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.BuoniFruttiferiPostali", b =>
                {
                    b.Navigation("Rendimenti");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.ContoDeposito", b =>
                {
                    b.Navigation("Tassi");
                });

            modelBuilder.Entity("Manage.Models.NetWorth.TitoloDiStato", b =>
                {
                    b.Navigation("Cedole");
                });
#pragma warning restore 612, 618
        }
    }
}
